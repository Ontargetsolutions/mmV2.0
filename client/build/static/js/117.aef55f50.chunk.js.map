{"version":3,"sources":["components/Widgets/WeatherV2.js"],"names":["getIcon","id","WeatherWidgets","state","weatherData","city","props","axios","get","this","then","response","setState","data","catch","error","console","log","elements","i","list","length","weather","ele","className","key","dt","moment","format","temp","max","main","push","name","day","renderFiveDayForecast","Component"],"mappings":"uPAQA,SAASA,EAAQC,GACf,OAAQA,GACN,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,sBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,eACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,sBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,iBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,gBACT,KAAY,MAAPA,EACH,MAAO,kBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,4BACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,mBACT,KAAY,MAAPA,GAAeA,GAAM,KAAOA,GAAM,IACrC,MAAO,kBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,uB,IAOQC,E,2MAEnBC,MAAQ,CACNC,YAAa,KACbC,KAAM,EAAKC,MAAMD,KAAO,EAAKC,MAAMD,KAAO,Y,mFAGvB,IAAD,OAGlBE,IAAMC,IAAI,4DAA8DC,KAAKN,MAAME,KAAO,iHACvFK,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAER,YAAaO,EAASE,UAEvCC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kCAAmCF,Q,8CAI5B,IACfX,EAAgBK,KAAKN,MAArBC,YACJc,EAAW,GACf,GAAId,EACF,IAAK,IAAIe,EAAI,EAAGA,EAAIf,EAAYgB,KAAKC,OAAQF,IAAK,CAChD,IAAMG,EAAUlB,EAAYgB,KAAKD,GAC7BI,EAAM,wBAAIC,UAAU,oDAAoDC,IAAKH,EAAQI,IACvF,0BAAMF,UAAU,QAAQf,KAAKN,MAAME,KAAnC,KAA2CsB,IAAoB,IAAbL,EAAQI,IAAWE,OAAO,gBAC5E,yBAAKJ,UAAU,UACb,uBAAGA,UAAWxB,EAAQsB,EAAQA,QAAQ,GAAGrB,OAE3C,0BAAMuB,UAAU,WAAWF,EAAQO,KAAKC,IAAI,uCAC5C,0BAAMN,UAAU,WAAWF,EAAQA,QAAQ,GAAGS,OAEhDb,EAASc,KAAKT,GAGlB,OAAOL,I,+BAGC,IACAd,EAAgBK,KAAKN,MAArBC,YACR,OACE,kBAAC,WAAD,KACE,yBAAKoB,UAAU,8DACI,OAAhBpB,GACC,yBAAKoB,UAAU,oCACb,yBAAKA,UAAU,qDACb,yBAAKA,UAAU,qBACb,4BAAKpB,EAAYC,KAAK4B,MACtB,8BAAON,MAASC,OAAO,kBAEzB,uBAAGJ,UAAWxB,EAAQI,EAAYgB,KAAK,GAAGE,QAAQ,GAAGrB,OAEvD,yBAAKuB,UAAU,gBACb,4BAAKpB,EAAYgB,KAAK,GAAGS,KAAKK,IAAI,0CAK1C,yBAAKV,UAAU,kBACb,wBAAIA,UAAU,oBACXf,KAAK0B,+B,GA7D0BC","file":"static/js/117.aef55f50.chunk.js","sourcesContent":["/**\n * Weather V2 Widget\n */\nimport React, { Component, Fragment } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\n\n// function to get today weather icon\nfunction getIcon(id) {\n  switch (id) {\n    case id >= 200 && id < 300:\n      return 'wi wi-night-showers'\n    case id >= 300 && id < 500:\n      return 'wi day-sleet';\n    case id >= 500 && id < 600:\n      return 'wi wi-night-showers';\n    case id >= 600 && id < 700:\n      return 'wi wi-day-snow';\n    case id >= 700 && id < 800:\n      return 'wi wi-day-fog';\n    case id === 800:\n      return 'wi wi-day-sunny';\n    case id >= 801 && id < 803:\n      return 'wi wi-night-partly-cloudy';\n    case id >= 802 && id < 900:\n      return 'wi wi-day-cloudy';\n    case id === 905 || (id >= 951 && id <= 956):\n      return 'wi wi-day-windy';\n    case id >= 900 && id < 1000:\n      return 'wi wi-night-showers'\n    default:\n      break;\n  }\n}\n\n// Main component\nexport default class WeatherWidgets extends Component {\n\n  state = {\n    weatherData: null,\n    city: this.props.city ? this.props.city : 'New York'\n  }\n\n  componentDidMount() {\n    var appid = 'b1b15e88fa797225412429c1c50c122a1'; // Your api id\n    var apikey = '69b72ed255ce5efad910bd946685883a'; //Your apikey\n    axios.get('https://api.openweathermap.org/data/2.5/forecast/daily?q=' + this.state.city + '&cnt=5&units=metric&mode=json&appid=' + appid + '&apikey=' + apikey)\n      .then(response => {\n        this.setState({ weatherData: response.data });\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n  }\n\n  renderFiveDayForecast() {\n    const { weatherData } = this.state;\n    let elements = [];\n    if (weatherData) {\n      for (let i = 1; i < weatherData.list.length; i++) {\n        const weather = weatherData.list[i];\n        let ele = <li className=\"d-flex justify-content-between align-items-center\" key={weather.dt}>\n          <span className=\"w-50\">{this.state.city}, {moment(weather.dt * 1000).format('ddd DD MMMM')}</span>\n          <div className=\"w-icon\">\n            <i className={getIcon(weather.weather[0].id)}></i>\n          </div>\n          <span className=\"d-block\">{weather.temp.max}<sup>°C</sup></span>\n          <span className=\"d-block\">{weather.weather[0].main}</span>\n        </li>;\n        elements.push(ele);\n      }\n    }\n    return elements;\n  }\n\n  render() {\n    const { weatherData } = this.state;\n    return (\n      <Fragment>\n        <div className=\"weather-top rct-weather-widget overflow-hidden rounded-top\">\n          {weatherData !== null &&\n            <div className=\"black-overlay weather-over py-20\">\n              <div className=\"weather-head mb-20 d-flex justify-content-between\">\n                <div className=\"align-items-start\">\n                  <h4>{weatherData.city.name}</h4>\n                  <span>{moment().format('ddd, HH:mm A')}</span>\n                </div>\n                <i className={getIcon(weatherData.list[0].weather[0].id)}></i>\n              </div>\n              <div className=\"weather-temp\">\n                <h2>{weatherData.list[0].temp.day}<sup>°C</sup></h2>\n              </div>\n            </div>\n          }\n        </div>\n        <div className=\"weather-bottom\">\n          <ul className=\"list-inline mb-0\">\n            {this.renderFiveDayForecast()}\n          </ul>\n        </div>\n      </Fragment>\n    )\n  }\n}\n"],"sourceRoot":""}