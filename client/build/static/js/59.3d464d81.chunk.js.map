{"version":3,"sources":["components/Charts/SalesChart.js","components/Widgets/DailySales.js","components/RctCard/RctCardHeading.js","components/RctCard/RctCard.js","components/RctCard/RctCardFooter.js","components/RctCard/RctCardContent.js","components/RctCard/index.js","constants/chart-config.js"],"names":["SalesChart","this","props","labels","label","borderColor","chartdata","pointBackgroundColor","height","pointBorderColor","borderWidth","data","canvas","ctx","getContext","_stroke","stroke","save","shadowColor","ChartConfig","shadowBlur","shadowOffsetX","shadowOffsetY","apply","arguments","restore","datasets","fill","lineTension","fillOpacity","pointBorderWidth","pointRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointHoverRadius","options","legend","display","scales","xAxes","ticks","min","gridLines","drawBorder","yAxes","suggestedMin","beginAtZero","Component","DailySales","className","color","info","white","RctCard","IntlMessages","id","RctCardHeading","title","customClasses","children","heading","headingCustomClasses","colClasses","RctCardFooter","RctCardContent","noPadding","AppConfig","themeColors","primary","danger","success","warning","purple","secondary","yellow","greyLighten","grey","legendFontColor","chartGridColor","axesColor"],"mappings":"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","file":"static/js/59.3d464d81.chunk.js","sourcesContent":["/**\n * Sales Chart Component\n */\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n// chart config file\nimport ChartConfig from '../../constants/chart-config';\n\n// Main Component\nexport default class SalesChart extends Component {\n    render() {\n        const { labels, label, borderColor, chartdata, pointBackgroundColor, height, pointBorderColor, borderWidth } = this.props;\n        const data = (canvas) => {\n            const ctx = canvas.getContext(\"2d\");\n            const _stroke = ctx.stroke;\n            ctx.stroke = function () {\n                ctx.save();\n                ctx.shadowColor = ChartConfig.shadowColor;\n                ctx.shadowBlur = 13;\n                ctx.shadowOffsetX = 0;\n                ctx.shadowOffsetY = 12;\n                _stroke.apply(this, arguments);\n                ctx.restore();\n            };\n            return {\n                labels: labels,\n                datasets: [\n                    {\n                        label: label,\n                        fill: false,\n                        lineTension: 0,\n                        fillOpacity: 0.3,\n                        borderColor: borderColor,\n                        borderWidth: borderWidth,\n                        pointBorderColor: pointBorderColor,\n                        pointBackgroundColor: pointBackgroundColor,\n                        pointBorderWidth: 3,\n                        pointRadius: 6,\n                        pointHoverBackgroundColor: pointBackgroundColor,\n                        pointHoverBorderColor: pointBorderColor,\n                        pointHoverBorderWidth: 4,\n                        pointHoverRadius: 7,\n                        data: chartdata,\n                    }\n                ]\n            }\n        }\n        // chart options\n        const options = {\n            legend: {\n                display: false\n            },\n            scales: {\n                xAxes: [{\n                    display: true,\n                    ticks: {\n                        min: 0\n                    },\n                    gridLines: {\n                        display: true,\n                        drawBorder: false\n                    }\n                }],\n                yAxes: [{\n                    display: false,\n                    ticks: {\n                        suggestedMin: 0,\n                        beginAtZero: true\n                    }\n                }]\n            }\n        };\n        return (\n            <Line data={data} options={options} height={height} />\n        );\n    }\n}\n","/**\n * Daily Sales Widget\n */\nimport React from 'react';\n\n// chart\nimport SalesChart from '../../components/Charts/SalesChart';\n\n// card component\nimport { RctCardFooter } from '../../components/RctCard';\n\n// constants\nimport ChartConfig from '../../constants/chart-config';\n\n// intl messages\nimport IntlMessages from '../../util/IntlMessages';\n\nconst DailySales = ({ label, chartdata, labels }) => (\n\t<div>\n\t\t<div className=\"p-20\">\n\t\t\t<div className=\"mb-20 d-flex\">\n\t\t\t\t<i className=\"mr-15 ti-arrow-up text-success font-lg\"></i>\n\t\t\t\t<div>\n\t\t\t\t\t<h2 className=\"mb-5\">12,255 Today</h2>\n\t\t\t\t\t<p className=\"mb-0\">10% increase from yesterday</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SalesChart\n\t\t\t\tlabel={label}\n\t\t\t\tchartdata={chartdata}\n\t\t\t\tlabels={labels}\n\t\t\t\tborderColor={ChartConfig.color.info}\n\t\t\t\tpointBackgroundColor={ChartConfig.color.info}\n\t\t\t\theight={125}\n\t\t\t\tpointBorderColor={ChartConfig.color.white}\n\t\t\t\tborderWidth={4}\n\t\t\t/>\n\t\t</div>\n\t\t<RctCardFooter>\n\t\t\t<span className=\"fs-12 text-base\">\n\t\t\t\t<i className=\"mr-5 zmdi zmdi-refresh\"></i>\n\t\t\t\t<IntlMessages id=\"widgets.updated10Minago\" />\n\t\t\t</span>\n\t\t</RctCardFooter>\n\t</div>\n);\n\nexport default DailySales;\n","/**\n * Rct Card Title\n */\n/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RctCardHeading = ({ title, customClasses }) => (\n    <div className={`rct-block-title ${customClasses ? customClasses : ''}`}>\n        <h4>{title}</h4>\n    </div>\n);\n\n// type checking props\nRctCardHeading.propTypes = {\n    title: PropTypes.any\n}\n\nexport { RctCardHeading };","/**\n * Rct Card\n */\nimport React from 'react';\n\n// rct card heading\nimport { RctCardHeading } from './RctCardHeading'\n\nconst RctCard = ({ children, customClasses, heading, headingCustomClasses, colClasses }) => (\n    <div className={colClasses && colClasses}>\n        <div className={`rct-block ${customClasses ? customClasses : ''}`}>\n            {heading &&\n                <RctCardHeading\n                    title={heading}\n                    customClasses={headingCustomClasses}\n                />\n            }\n            {children}\n        </div>\n    </div>\n);\n\nexport { RctCard };\n","/**\n * Rct Card Footer\n */\nimport React from 'react';\n\nconst RctCardFooter = ({ children, customClasses }) => (\n    <div className={`rct-block-footer ${customClasses ? customClasses : ''}`}>\n        {children}\n    </div>\n);\n\nexport { RctCardFooter };\n","/**\n * Rct Card Content\n */\nimport React from 'react';\n\nconst RctCardContent = ({ children, customClasses, noPadding }) => (\n    <div className={`${noPadding ? 'rct-full-block' : 'rct-block-content'} ${customClasses ? customClasses : ''}`}>\n        {children}\n    </div>\n);\n\nexport { RctCardContent };\n","/**\n * Rct Card\n */\nexport * from './RctCard';\nexport * from './RctCardFooter';\nexport * from './RctCardContent';\nexport * from './RctCardHeading';\n","/**\n* Change all chart colors\n*/\nimport AppConfig from './AppConfig';\n\nconst { primary, info, danger, success, warning, purple, secondary, yellow, white, greyLighten, grey } = AppConfig.themeColors;\n\nconst ChartConfig = {\n  color: {\n    'primary': primary,\n    'info': info,\n    'warning': warning,\n    'danger': danger,\n    'success': success,\n    'default': '#DEE4E8',\n    'purple': purple,\n    'secondary': secondary,\n    'yellow': yellow,\n    'white': '#FFFFFF',\n    'dark': white,\n    'greyLighten': greyLighten,\n    'grey': grey\n  },\n  legendFontColor: '#AAAEB3', // only works on react chart js 2\n  chartGridColor: '#EAEAEA',\n  axesColor: '#657786',\n  shadowColor: 'rgba(0,0,0,0.6)'\n}\n\n// Tooltip Styles\nexport const tooltipStyle = {\n  backgroundColor: 'rgba(0,0,0,0.6)',\n  border: '1px solid rgba(0,0,0,0.6)',\n  borderRadius: '5px'\n}\n\nexport const tooltipTextStyle = {\n  color: '#FFF',\n  fontSize: '12px',\n  paddingTop: '5px',\n  paddingBottom: '5px',\n  lineHeight: '1'\n}\n\nexport default ChartConfig;\n"],"sourceRoot":""}