{"version":3,"sources":["components/Widgets/Notifications.js"],"names":["TabContainer","children","dir","component","style","padding","Notifications","state","value","messages","notificationTypes","notifications","handleChange","event","setState","handleChangeIndex","index","this","getMessages","getNotificationTypes","getNotifications","api","get","then","response","data","catch","error","console","log","notificationId","notificationType","id","className","class","icon","Name","theme","props","position","color","onChange","indicatorColor","textColor","variant","label","autoHeight","autoHeightMin","autoHeightMax","autoHide","axis","direction","onChangeIndex","map","notification","key","getNotificationName","date","userName","src","userAvatar","alt","width","height","message","from","Component","withStyles","withTheme"],"mappings":"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","file":"static/js/102.84c69e1b.chunk.js","sourcesContent":["/**\n * Notifications Widget\n */\nimport React, { Fragment, Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Typography from '@material-ui/core/Typography';\n\n// api\nimport api from 'api';\n\n// intl messages\nimport IntlMessages from 'util/IntlMessages';\n\nfunction TabContainer({ children, dir }) {\n   return (\n      <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n         {children}\n      </Typography>\n   );\n}\n\nclass Notifications extends Component {\n\n   state = {\n      value: 0,\n      messages: null,\n      notificationTypes: null,\n      notifications: null\n   };\n\n   componentDidMount() {\n      this.getMessages();\n      this.getNotificationTypes();\n      this.getNotifications();\n   }\n\n   // get messages\n   getMessages() {\n      api.get('messages.js')\n         .then((response) => {\n            this.setState({ messages: response.data });\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notification types\n   getNotificationTypes() {\n      api.get('notificationTypes.js')\n         .then((response) => {\n            this.setState({ notificationTypes: response.data });\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notifications\n   getNotifications() {\n      api.get('notifications.js')\n         .then((response) => {\n            this.setState({ notifications: response.data });\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   handleChange = (event, value) => {\n      this.setState({ value });\n   };\n\n   handleChangeIndex = index => {\n      this.setState({ value: index });\n   };\n\n   /**\n    * Function to return notification name\n    */\n   getNotificationName(notificationId) {\n      const { notificationTypes } = this.state;\n      if (notificationTypes) {\n         for (const notificationType of notificationTypes) {\n            if (notificationId === notificationType.id) {\n               return (\n                  <span className={`text-${notificationType.class} mr-5`}>\n                     <i className={`zmdi zmdi-${notificationType.icon}`}></i> {notificationType.Name}\n                  </span>\n               );\n            }\n         }\n      }\n   }\n\n   render() {\n      const { theme } = this.props;\n      const { messages, notifications } = this.state;\n      return (\n         <Fragment>\n            <AppBar position=\"static\" color=\"default\">\n               <Tabs\n                  value={this.state.value}\n                  onChange={this.handleChange}\n                  indicatorColor=\"primary\"\n                  textColor=\"primary\"\n                  variant=\"fullWidth\"\n               >\n                  <Tab label={<IntlMessages id=\"widgets.recentNotifications\" />} />\n                  <Tab label={<IntlMessages id=\"widgets.messages\" />} />\n               </Tabs>\n            </AppBar>\n            <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={375} autoHide>\n               <SwipeableViews\n                  axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                  index={this.state.value}\n                  onChangeIndex={this.handleChangeIndex}>\n                  <div className=\"card mb-0 notification-box\">\n                     <TabContainer dir={theme.direction}>\n                        <ul className=\"list-inline mb-0\">\n                           {notifications && notifications.map((notification, key) => (\n                              <li className=\"d-flex justify-content-between\" key={key}>\n                                 <div className=\"align-items-start\">\n                                    <p className=\"mb-5 message-head\">\n                                       {this.getNotificationName(notification.notificationId)}\n                                       {notification.date}\n                                    </p>\n                                    <h5 className=\"mb-5\">{notification.userName}</h5>\n                                    <p className=\"mb-0 text-muted\">{notification.notification}</p>\n                                 </div>\n                                 <div className=\"align-items-end notify-user\">\n                                    <img src={notification.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                                 </div>\n                              </li>\n                           ))}\n                        </ul>\n                     </TabContainer>\n                  </div>\n                  <div className=\"card mb-0 notification-box\">\n                     <TabContainer dir={theme.direction}>\n                        <ul className=\"list-inline mb-0\">\n                           {messages && messages.map((message, key) => (\n                              <li className=\"d-flex justify-content-between\" key={key}>\n                                 <div className=\"align-items-start\">\n                                    <p className=\"mb-5 message-head\">\n                                       <span className=\"text-primary mr-5\">\n                                          <i className=\"zmdi zmdi-comment-alt-text\"></i> <IntlMessages id=\"widgets.messages\" /></span> {message.date}\n                                    </p>\n                                    <h5 className=\"mb-5\">{message.from.userName}</h5>\n                                    <p className=\"mb-0 text-muted\">{message.message}</p>\n                                 </div>\n                                 <div className=\"align-items-end notify-user\">\n                                    <img src={message.from.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                                 </div>\n                              </li>\n                           ))}\n                        </ul>\n                     </TabContainer>\n                  </div>\n               </SwipeableViews>\n            </Scrollbars>\n         </Fragment>\n      );\n   }\n}\n\nexport default withStyles(null, { withTheme: true })(Notifications);\n"],"sourceRoot":""}